S -> <FUNCTION> <MAIN>


---------------------------------------------------------------------------------------------------------------------------------------------------

FUNCTION ->
function <IDENTIFIER> (<ARGUMENTS>):<DATATYPE> { <STATEMENT> } <FUNCTION> | ^

MAIN ->
function main (): int { <STATEMENT> }

ARGUMENTS ->
<IDENTIFIER>: <DATATYPE> | <IDENTIFIER>: <DATATYPE>, <ARGUMENTS> | ^

PARAMS ->
<EXPRESSION> | <EXPRESSION>, <PARAMS> | ^

RETURN ->
return <EXPRESSION>; | return; | ^

---------------------------------------------------------------------------------------------------------------------------------------------------

NUMBER (regex) ->
[0-9]+

IDENTIFIER (regex python, any identifier with get_number_01)
- must start with any alphabetic string
- can have after string a <_alphastring> subpattern
- must end with <_01> pattern or nothing (previous condition) ->
^[A-Za-z]+(?:[_][A-Za-z]+)*(?:[_][0-9]+)*$

---------------------------------------------------------------------------------------------------------------------------------------------------

DATATYPE ->
int | float | bool | color | string | direction | void

INTEGER ->
<NUMBER>

FLOAT ->
<NUMBER>.<NUMBER>

BOOLEAN ->
true | false

COLOR ->
red | green | blue

DIRECTION ->
left | right | front | back

INVOKE ->
invoke <IDENTIFIER>(<PARAMS>);

---------------------------------------------------------------------------------------------------------------------------------------------------

CONST_DECLARATION ->
const <CONST_DECLARATION_LIST>;

CONST_DECLARATION_LIST ->
<CONST_DECLARATION_INIT> | <CONST_DECLARATION_INIT>, <CONST_DECLARATION_LIST>

CONST_DECLARATION_INIT ->
<IDENTIFIER>: <DATATYPE> = <EXPRESSION>

VAR_DECLARATION ->
var <VAR_DECLARATION_LIST>;

VAR_DECLARATION_LIST ->
<VAR_DECLARATION_INIT> | <VAR_DECLARATION_INIT>, <VAR_DECLARATION_LIST>

VAR_DECLARATION_INIT ->
<IDENTIFIER>: <DATATYPE> = <EXPRESSION> | <IDENTIFIER>: <DATATYPE>

---------------------------------------------------------------------------------------------------------------------------------------------------

MOVE (builtin function that receives direction and ms) o DIRECTION ->
invoke move(<TERM>, <TERM>);

IS_CLEAR (builtin function that receives direction to check) ->
invoke is_clear(<TERM>, <TERM>);

GET_COLOR ->
invoke getcolor();

BUILTIN_FUNCTION -> PUEDE SER ACTION
<MOVE> | <IS_CLEAR> | <GET_COLOR>

---------------------------------------------------------------------------------------------------------------------------------------------------

TERM ->
<FACTOR> | <FACTOR> <MULTIPLICATION_OPERATOR> <FACTOR>

FACTOR ->
<SUM_OPERATOR> <INTEGER> | <SUM_OPERATOR> <FLOAT> | <SUM_OPERATOR> <IDENTIFIER> | <SUM_OPERATOR> <INVOKE> | <SUM_OPERATOR> (<ARITHMETIC_EXPRESSION>)
| <INTEGER> | <FLOAT> | <IDENTIFIER> | <INVOKE> | (<ARITHMETIC_EXPRESSION>) | <DIRECTION> | <COLOR>

---------------------------------------------------------------------------------------------------------------------------------------------------

EXPRESSION ->
<CONDITIONAL_EXPRESSION> | <ARITHMETIC_EXPRESSION>

ARITHMETIC_EXPRESSION ->
<TERM> | <TERM> <SUM_OPERATOR> <TERM>

RELATIONAL_EXPRESSION ->
<TERM> <RELATION_OPERATOR> <TERM> 

OR_CONDITIONAL_EXPRESSION ->
<RELATIONAL_EXPRESSION> | <RELATIONAL_EXPRESSION> || <RELATIONAL_EXPRESSION>

<CONDITIONAL_EXPRESSION> ->
<OR_CONDITIONAL_EXPRESSION> | <OR_CONDITIONAL_EXPRESSION> && <OR_CONDITIONAL_EXPRESSION>

---------------------------------------------------------------------------------------------------------------------------------------------------

RELATION_OPERATOR ->
<= | >= | < | > | == | !=

SUM_OPERATOR ->
+ | -

MULTIPLICATION_OPERATOR ->
/ | * | %

CONDITIONAL_OPERATOR ->
|| | &&

---------------------------------------------------------------------------------------------------------------------------------------------------

STATEMENT ->
<DECLARATION_STMT> <STATEMENT> | <ASSIGNMENT_STMT> <STATEMENT> | <CONDITIONAL_STMT> <STATEMENT> | <ITERATION_STMT> <STATEMENT>
| <INVOKE_STMT> <STATEMENT> | <BUILTIN_FUNCTION> <STATEMENT> | <RETURN> <STATEMENT> | <STATEMENT>

IF_CONDITIONAL_STMT ->
if (<CONDITIONAL_EXPRESSION>) { <STATEMENT> }

DECLARATION_STMT
<VAR_DECLARATION> | <CONST_DECLARATION>

CONDITIONAL_STMT ->
<IF_CONDITIONAL_STMT> | <IF_CONDITIONAL_STMT> else { <STATEMENT> }

ASSIGNMENT_STMT ->
<IDENTIFIER> = <EXPRESSION>;

ITERATION_STMT ->
while (<CONDITIONAL_EXPRESSION>) { <STATEMENT> }

---------------------------------------------------------------------------------------------------------------------------------------------------
